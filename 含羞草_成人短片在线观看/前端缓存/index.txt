## 前端缓存
  前端缓存可分为两大类: HTTP缓存和浏览器缓存。

  前端缓存{
    1：HTTP缓存{
        1：强缓存：{
          1:Pargma,
          2:Cache-Control
          3:Expires
        },
        2:协商缓存:{
          1:ETag/IF-None-Match
          2:Last-Modified/ If-Modified-Since
        }
      }

    2：浏览器缓存：{
        1:本地存储：{
          1:Cookie
          2:WebStorage:{
            1:SessionStorage
            2:LocalStorage
          }
          3: WebSql
          4: indexDB
          5: Application Cache 
          6: PWA
        }
        2：默认缓存-往返缓存BFC Cache
    }
  }


## 什么是Http缓存?

Answer： HTTP缓存指的是当客户端向服务器请求资源时，会先抵达浏览器缓存，如果浏览器有"要请求资源"的副本。
          就可以直接从浏览器缓存中提取，而不是从原原始服务器中提取这个资源

          常见的HTTP缓存只能缓存get 请求响应的资源，对于其他类型的响应则无能为力，所以后续说的请求缓存都是指
          GET请求

          HTTP缓存都是从第二次请求开始的，第一次请求资源时，服务器返回资源，并在respone header 头中回传资源的缓存参数 ，第二次请求时，浏览器判断这些请求参数，命中强缓存就直接200 ， 否则就把请求参数加到 request header
          头中传给服务器 ，看是否命中协商缓存， 命中则返回304 ， 否则服务会返回新的资源

## HTTP 缓存分类

Answer： 
  根据是否需要重新向服务器发起请求来分类，可分为( 强制缓存 ， 协商缓存 )
  根据是否可以被单个或者多个用户使用来分类 ，可分为( 私有缓存 ， 共享缓存 )
  强制缓存如果生效， 不需要再和服务器 发生交互， 而协商缓存不管是否生效，都需要与服务端发生交互，

  强制缓存和协商缓存的一些对比：

                          强缓存                   协商缓存
    
    缓存存放位置:       本地浏览器                  本地浏览器
    HTTP状态吗          200                         304
    谁来决定            {                           ETag/if-Not-Match
                                                      Last-Modified/if-Modified-Since
                          Pragma 
                          Cache-Control
                          Expires                 

                        }


  
## 为什么要使用HTTP缓存
  1： 减少了多余的数据传输
  2： 缓解了服务器的压力，大大提高了网站的性能
  3：加快了客户端加载网页的速度



## 如何使用HTTP缓存？ 
  一般需要缓存的资源有HTML页面和其他静态资源

  1.HTML页面缓存的设置主要是再<head> 标签嵌入<meta>标签，这种方式只对页面有效，
    对页面上的资源无效

    1.1 HTML 页面禁用缓存的设置如下：
      <mate http-equiv = 'pragma' content='no-cache'>

    1.2 html 设置缓存如下：
      <meta http-equiv='Cache-Control' content="max-age=7200">



    2、静态资源的缓存一般是在web服务器上配置的，常用的web服务器有：nginx、apache。具体的配置这里不做详细介绍，大家自行查阅。  

    3、不想使用缓存的几种方式：

    3.1、Ctrl + F5强制刷新，都会直接向服务器提取数据。
    3.2、按F5刷新或浏览器的刷新按钮，默认加上Cache-Control：max-age=0，即会走协商缓存。
    3.2、在IE浏览器下不想使用缓存的做法：打开IE，点击工具栏上的工具->Internet选项->常规->浏览历史记录 设置. 选择“从不”，然后保存。最后点击“删除”把Internet临时文件都删掉 （IE缓存的文件就是Internet临时文件）。
    3.3、还有就是上面1、2中禁用缓存的做法
    3.4、对于其他浏览器也都有清除缓存的办法


  
  ##HTTP 缓存的几个注意点
  1、强缓存情况下，只要缓存还没过期，就会直接从缓存中取数据，就算服务器端有数据变化，也不会从服务器端获取了，这样就无法获取到修改后的数据。决解的办法有：在修改后的资源加上随机数,确保不会从缓存中取。

例如：
http://www.kimshare.club/kim/common.css?v=22324432
http://www.kimshare.club/kim/common.2312331.css

2、尽量减少304的请求，因为我们知道，协商缓存每次都会与后台服务器进行交互，所以性能上不是很好。从性能上来看尽量多使用强缓存。

3、在Firefox浏览器下，使用Cache-Control: no-cache 是不生效的，其识别的是no-store。这样能达到其他浏览器使用Cache-Control: no-cache的效果。所以为了兼容Firefox浏览器，经常会写成Cache-Control: no-cache，no-store。

4、与缓存相关的几个header属性有：Vary、Date/Age。

Vary：

vary本身是“变化”的意思，而在http报文中更趋于是“vary from”（与。。。不同）的含义，它表示服务端会以什么基准字段来区分、筛选缓存版本。

在服务端有着这么一个地址，如果是IE用户则返回针对IE开发的内容，否则返回另一个主流浏览器版本的内容。

格式：Vary: User-Agent

知会代理服务器需要以 User-Agent 这个请求首部字段来区别缓存版本，防止传递给客户端的缓存不正确。



Date/Age：

响应报文中的 Date 和 Age 字段：区分其收到的资源是否命中了代理服务器的缓存。

Date 理所当然是原服务器发送该资源响应报文的时间（GMT格式），如果你发现 Date 的时间与“当前时间”差别较大，或者连续F5刷新发现 Date 的值都没变化，则说明你当前请求是命中了代理服务器的缓存。

Age 也是响应报文中的首部字段，它表示该文件在代理服务器中存在的时间（秒），如文件被修改或替换，Age会重新由0开始累计。