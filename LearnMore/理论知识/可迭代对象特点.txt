Question： 可迭代对象有什么特点

Answer：ES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性，换个角度，也可以认为，一个数据结构只要具有 Symbol.iterator 属性(Symbol.iterator 方法对应的是遍历器生成函数，返回的是一个遍历器对象)，那么就可以其认为是可迭代的。

可迭代对象的特点：
    具有Symbol.iterator属性, Symbol.iterator() 返回的是一个遍历对象
    可以使用for...of 进行循环

    let arry = [1, 2, 3, 4];
    let iter = arry[Symbol.iterator]();
    console.log(iter.next()); //{ value: 1, done: false }
    console.log(iter.next()); //{ value: 2, done: false }
    console.log(iter.next()); //{ value: 3, done: false }


    原生具有 Iterator 接口的数据结构：

    Array
    Map
    Set
    String
    TypedArray
    函数的 arguments 对象
    NodeList 对象

    自定义一个可迭代对象
    上面我们说，一个对象只有具有正确的 Symbol.iterator 属性，那么其就是可迭代的，因此，我们可以通过给对象新增 Symbol.iterator 使其可迭代。
    let obj = {
        name: "Yvette",
        age: 18,
        job: 'engineer',
        *[Symbol.iterator]() {
            const self = this;
            const keys = Object.keys(self);
            for (let index = 0; index < keys.length; index++) {
                yield self[keys[index]];//yield表达式仅能使用在 Generator 函数中
            }
        }
    };

    for (var key of obj) {
        console.log(key); //Yvette 18 engineer
    }